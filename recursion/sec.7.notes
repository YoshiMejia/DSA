.vid44.

The call stack.

-Stack data structure.
- any time a function is invoked, it's placed (pushed) on the top of the call stack
- when JS sees the 'return' keyword or when the function ends, the compiler removes (pop) the top item from the call stack
- when writing recursive functions, we keep pushing new functions onto the call stack

how recursive functions work
 - invoke the same function w different inputs until you reach your base case
    Base case is where the recursion ends. It's the condition on which the function calls stop ( like a while loop dependent on while the array is not empty)

2 essential parts to a recursive function --
    - Base case
    - Diff inputs


.vid47.Common recursion pitfalls

- no base case
- forgetting to return, or returning the wrong thing

vid.48.Helper method recursion

example: 

function outer(input){
    let outerScopeVar = []
    function helper(helperInput){
        //modify the outerScopeVar
        helper(helperInput--)
    }
    helper(input)
    return outerScopeVar;
}

example 2 - collecting all odd values in an array - 

function collectOddValues(arr){
    let result = []
    function helper(helperInput){
        if(helperInput.length === 0){
            return;
        }
        if(helperInput[0] % 2 !== 0){
            result.push(helperInput[0])
        }
        helper(helperInput.slice(1))
    }
    helper(arr)
    return result;
}

example 3 - above function but using Pure Recursion (no helper method)

function collectOddValues(arr){
    // a new array will be made on each function call made below, but it will all be concatenated to one array at the end

    let newArr = [];
        if(arr.length === 0){
            return newArr;
        }
        if(arr[0] % 2 !== 0){
            newArr.push(arr[0])
        }
    newArr = newArr.concat(collectOddValues(arr.slice(1)));
    return newArr;
}


--Pure Recursion Tips--

- for arrays, use methods like .slice, the spread operator, and .concat all of which make copies of arrays so we don't mutate the original.
- strings are immutable so you'll need to use methods like .slice, .substr, or substring to make copies of strings
- to make copies of objects use Object.assign, or the spread operator.
